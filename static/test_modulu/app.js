//@ sourceMappingURL=app.map
// Generated by CoffeeScript 1.6.1
var App, make_wrapper;

window.channel = Backbone.Radio.channel('main');

make_wrapper = function() {
  var el;
  el = $('#content').append('<div></div>');
  return el.find('div');
};

App = new Marionette.Application();

App.on('start', function() {
  var active_module, mb, that;
  console.log('App start');
  mb = this.module("ModuleB");
  active_module = null;
  that = this;
  window.channel.comply('ma', function(options) {
    var el;
    console.log('command **ma**');
    console.log(options);
    if (active_module !== null) {
      active_module.stop();
    }
    active_module = that.module("ModuleA");
    el = make_wrapper();
    return active_module.start({
      el: el
    });
  });
  return window.channel.comply('mb', function(options) {
    var el;
    console.log('command **mb**');
    console.log(options);
    if (active_module !== null) {
      active_module.stop();
    }
    active_module = that.module("ModuleB");
    el = make_wrapper();
    return active_module.start({
      el: el
    });
  });
});

App.module("ModuleA", function(Mod, App, Backbone, Marionette, $, _) {
  var AppLayoutView, Block1View, Block2View;
  Mod.startWithParent = false;
  AppLayoutView = Backbone.Marionette.LayoutView.extend({
    template: function(serialized_model) {
      return _.template('<div id="block1"></div><div id="block2"></div>')(serialized_model);
    },
    regions: {
      block1: "#block1",
      block2: "#block2"
    }
  });
  Block1View = Backbone.Marionette.ItemView.extend({
    template: function(serialized_model) {
      return _.template("<h1><span style=\"color:red\">A:</span> Toto je Block1View</h1>")(serialized_model);
    },
    onDestroy: function() {
      return console.log('ModuleA Block1View destroy');
    }
  });
  Block2View = Backbone.Marionette.ItemView.extend({
    template: function(serialized_model) {
      return _.template("<h1><span style=\"color:red\">A:</span> Toto je Block2View</h1>")(serialized_model);
    },
    onDestroy: function() {
      return console.log('ModuleA Block2View destroy');
    }
  });
  Mod.onBeforeStart = function() {
    return console.log('ModuleA beforeStart');
  };
  Mod.onStart = function(options) {
    console.log('ModuleA start');
    console.log(options);
    this.layout = new AppLayoutView({
      el: options.el
    });
    this.layout.render();
    this.layout.getRegion('block1').show(new Block1View());
    return this.layout.getRegion('block2').show(new Block2View());
  };
  return Mod.onStop = function() {
    console.log('ModuleA stop');
    return this.layout.destroy();
  };
});

App.module("ModuleB", function(Mod, App, Backbone, Marionette, $, _) {
  var AppLayoutView, Block1View, Block2View;
  Mod.startWithParent = false;
  AppLayoutView = Backbone.Marionette.LayoutView.extend({
    template: function(serialized_model) {
      return _.template('<div id="block1"></div><div id="block2"></div>')(serialized_model);
    },
    regions: {
      block1: "#block1",
      block2: "#block2"
    }
  });
  Block1View = Backbone.Marionette.ItemView.extend({
    template: function(serialized_model) {
      return _.template("<h1><span style=\"color:green\">B:</span> Toto je Block1View</h1>")(serialized_model);
    }
  });
  Block2View = Backbone.Marionette.ItemView.extend({
    template: function(serialized_model) {
      return _.template("<h1><span style=\"color:green\">B:</span> Toto je Block2View</h1>")(serialized_model);
    }
  });
  Mod.onBeforeStart = function() {
    return console.log('ModuleB beforeStart');
  };
  Mod.onStart = function(options) {
    console.log('ModuleB start');
    this.layout = new AppLayoutView({
      el: options.el
    });
    this.layout.render();
    console.log($('#content').length);
    this.layout.getRegion('block1').show(new Block1View());
    return this.layout.getRegion('block2').show(new Block2View());
  };
  return Mod.onStop = function() {
    console.log('ModuleB stop');
    return this.layout.destroy();
  };
});

App.start();
