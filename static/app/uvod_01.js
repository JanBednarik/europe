// Generated by CoffeeScript 1.10.0
var App;

window.main_channel = Backbone.Wreqr.radio.channel('main');

document['onkeypress'] = function(e) {
  var evt;
  evt = e || window.event;
  if (evt.keyCode === 113) {
    window.main_channel.commands.execute('main', 'key-up');
  } else if (evt.keyCode === 97) {
    window.main_channel.commands.execute('main', 'key-down');
  } else if (evt.keyCode === 32) {
    window.main_channel.commands.execute('main', 'key-fire');
  }
};

App = new Marionette.Application();

App.module("Categories", function(Mod, App, Backbone, Marionette, $, _) {
  Mod.timer_id = void 0;
  Mod.timer_delay = 60;
  Mod.timer_fn = function() {
    return console.log('ted by se vratila hra na obrazovku #1');
  };
  Mod.clear_timer = function() {
    if (Mod.timer_fn !== void 0) {
      return window.clearTimeout(Mod.timer_id);
    }
  };
  Mod.set_timer = function() {
    Mod.clear_timer();
    return Mod.timer_id = window.setTimeout(Mod.timer_fn, Mod.timer_delay * 1000);
  };
  Mod.Category = Backbone.Model.extend({
    idAttribute: 'id',
    defaults: {
      id: void 0,
      title: void 0,
      active: false
    }
  });
  Mod.Categories = Backbone.Collection.extend({
    model: Mod.Category,
    comparator: 'title',
    url: '/api/categories',
    parse: function(response, options) {
      return response.results;
    },
    set_active: function(index) {
      var obj;
      if (this.length < 1) {
        return;
      }
      if (!index || index < 0 || index >= this.length) {
        index = 0;
      }
      obj = this.at(index);
      if (obj !== void 0) {
        this.each(function(i) {
          if (i.get('active')) {
            return i.set('active', false);
          }
        });
        obj.set('active', true);
      }
      this.trigger('change');
      return index;
    }
  });
  Mod.CategoryItemView = Marionette.ItemView.extend({
    tagName: "tr",
    template: function(serialized_model) {
      return _.template("<td><% if (active) {%> â–ˆ&nbsp;<% } %></td><td><%= title %></td>")(serialized_model);
    }
  });
  return Mod.CategoriesView = Marionette.CollectionView.extend({
    childView: Mod.CategoryItemView,
    el: '#categories',
    initialize: function(options) {
      var that;
      this.index = 0;
      that = this;
      this.collection.on('sync', (function(_this) {
        return function() {
          that.index = _this.collection.set_active(that.index);
          return _this.render();
        };
      })(this));
      this.collection.on('change', (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
      return window.main_channel.commands.setHandler('main', function(msg) {
        var clear_timeout, old_index;
        old_index = that.index;
        clear_timeout = true;
        if (msg === 'key-up' && that.index > 0) {
          that.index -= 1;
        } else if (msg === 'key-down' && that.index < that.collection.length - 1) {
          that.index += 1;
        } else if (msg === 'key-fire') {
          console.log('fajrunk');
        } else {
          clear_timeout = false;
        }
        if (clear_timeout) {
          Mod.set_timer();
        }
        if (old_index !== that.index) {
          return that.collection.set_active(that.index);
        }
      });
    }
  });
});

App.addInitializer(function(options) {
  var Categories, categories, categories_view;
  Categories = App.module("Categories");
  categories = new Categories.Categories();
  categories_view = new Categories.CategoriesView({
    collection: categories
  });
  categories.fetch();
  return Categories.set_timer();
});

App.start();
