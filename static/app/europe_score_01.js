//@ sourceMappingURL=europe_score_01.map
// Generated by CoffeeScript 1.6.1

App.module("Score", function(Mod, App, Backbone, Marionette, $, _) {
  var CategoryResultItemView, CategoryResultView, Result, ResultItemView, ResultLayout, ResultView, Results, _options;
  Mod.startWithParent = false;
  _options = void 0;
  Result = Backbone.Model.extend({
    defaults: {
      name: void 0,
      time: void 0,
      category: void 0
    },
    url: '/api/score'
  });
  Results = Backbone.Collection.extend({
    model: Result,
    initialize: function(category) {
      if (category) {
        return this.url = "/api/results/" + category;
      } else {
        return this.url = "/api/results";
      }
    },
    parse: function(response, options) {
      return response.results;
    }
  });
  ResultItemView = Marionette.ItemView.extend({
    tagName: "tr",
    template: function(serialized_model) {
      return _.template("<td class=\"text-right\">?</td>\n<td><%= name %></td>\n<td><%= category %></td>\n<td class=\"text-right\"><%= show_time() %></td>")(serialized_model);
    },
    templateHelpers: function() {
      return {
        show_time: function() {
          return display_elapsed(this.time);
        }
      };
    }
  });
  CategoryResultItemView = Marionette.ItemView.extend({
    tagName: "tr",
    template: function(serialized_model) {
      return _.template("<td class=\"text-right\">?</td>\n<td><%= name %></td>\n<td class=\"text-right\"><%= show_time() %></td>")(serialized_model);
    },
    templateHelpers: function() {
      return {
        show_time: function() {
          return display_elapsed(this.time);
        }
      };
    }
  });
  ResultView = Marionette.CollectionView.extend({
    childView: ResultItemView,
    tagName: 'table',
    className: 'table',
    initialize: function(options) {
      var _this = this;
      return this.collection.on('sync', function() {
        console.log(_this.collection);
        return _this.render();
      });
    },
    onDestroy: function() {
      return this.collection.off('sync');
    }
  });
  CategoryResultView = Marionette.CollectionView.extend({
    childView: CategoryResultItemView,
    tagName: 'table',
    className: 'table',
    initialize: function(options) {
      var _this = this;
      return this.collection.on('sync', function() {
        return _this.render();
      });
    },
    onDestroy: function() {
      return this.collection.off('sync');
    }
  });
  ResultLayout = Marionette.LayoutView.extend({
    template: _.template("<div class=\"row\">\n    <div class=\"col-md-6\">\n        <h3>Nejlepší celkové výsledky</h3>\n        <div id=\"total-results\">\n        </div>\n    </div>\n    <div class=\"col-md-1\"></div>\n    <div class=\"col-md-5\">\n        <h3>Nejlepší výsledky v kategorii XYZ</h3>\n        <div id=\"category-results\">\n        </div>\n    </div>\n</div>"),
    regions: {
      total: '#total-results',
      category: '#category-results'
    }
  });
  Mod.onStart = function(options) {
    var category_results, category_view, layout, result_view, total_results;
    console.log(options);
    _options = options;
    total_results = new Results();
    category_results = new Results(options.category.id);
    result_view = new ResultView({
      collection: total_results
    });
    category_view = new CategoryResultView({
      collection: category_results
    });
    layout = new ResultLayout({
      el: make_content_wrapper()
    });
    layout.render();
    layout.getRegion('total').show(result_view);
    layout.getRegion('category').show(category_view);
    total_results.fetch();
    return category_results.fetch();
  };
  return Mod.onStop = function() {
    clear_delay();
    return view.destroy();
  };
});
