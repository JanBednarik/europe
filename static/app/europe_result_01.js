//@ sourceMappingURL=europe_result_01.map
// Generated by CoffeeScript 1.6.1

App.module("Result", function(Mod, App, Backbone, Marionette, $, _) {
  var BadTimeView, GreatTimeView, IDLE_DELAY, LETTERS, LETTER_BACKSPACE, LETTER_ENTER, NAME_MAX_LENGTH, Name, Rank, ResultLayout, Time, TypewriterView, format_results, handler, layout, name, rank, time, _options;
  Mod.startWithParent = false;
  IDLE_DELAY = 10000;
  NAME_MAX_LENGTH = 16;
  LETTERS = 'ABCDEFGHIJKLMNOPRSTUVWXYZ 0123456789-._*?!#:()←✔';
  LETTER_BACKSPACE = '←';
  LETTER_ENTER = '✔';
  _options = void 0;
  time = void 0;
  rank = void 0;
  name = void 0;
  layout = void 0;
  format_results = function(data) {
    var answers, out;
    answers = data.answers.map(function(i) {
      return "" + i.id + ":" + i.answer;
    });
    return out = {
      category: data.category.id,
      name: null,
      time: data.time,
      answers: answers.join(',')
    };
  };
  Time = Backbone.Model.extend({
    defaults: {
      time: void 0
    }
  });
  Rank = Backbone.Model.extend({
    defaults: {
      position: void 0,
      total: void 0,
      top: void 0,
      category_position: void 0,
      category_total: void 0,
      category_top: void 0
    },
    initialize: function(category_id, time) {
      return this.url = "/api/results/" + category_id + "/" + time;
    }
  });
  Name = Backbone.Model.extend({
    defaults: {
      name: '',
      letter: 'A'
    }
  });
  GreatTimeView = Marionette.ItemView.extend({
    template: function(serialized_model) {
      return _.template("<h3>Nový rekord!</h3>\n<h1><%= show_time() %></h1>")(serialized_model);
    },
    templateHelpers: function() {
      return {
        show_time: function() {
          return display_elapsed(this.time);
        }
      };
    }
  });
  BadTimeView = Marionette.ItemView.extend({
    template: function(serialized_model) {
      return _.template("<h3>Váš čas</h3>\n<h1><%= show_time() %></h1>\n<br>\n<p>Zmáčkni kterékoliv tlačítko pro pokračování.</p>")(serialized_model);
    },
    templateHelpers: function() {
      return {
        show_time: function() {
          return display_elapsed(this.time);
        }
      };
    },
    initialize: function() {
      return window.channel.on('keypress', function(msg) {
        return window.channel.command('result:save', null);
      });
    },
    onDestroy: function() {
      return window.channel.off('keypress');
    }
  });
  TypewriterView = Marionette.ItemView.extend({
    template: function(serialized_model) {
      return _.template("<p>Tvůj čas se dostal do žebříčku! Zadej jméno svého týmu:</p>\n<h1><span><%= name %></span><span style=\"background:#000;color:#fff;padding-left:.1em;padding-right:.1em\"><%= letter %></span><span style=\"color:#ccc\"><%= show_empty() %></span></h1>\n<p><%= show_alphabet() %></p>\n<p><em>Tlačítky nahoru/dolů vybírej písmena, tlačítkem OK vyber konkrétní znak.<br/>Symbolem " + LETTER_BACKSPACE + " smažeš předchozí znak, symbolem " + LETTER_ENTER + " jméno uložíš.<br/>Délka jména maximálně " + NAME_MAX_LENGTH + " znaků.</em></p>")(serialized_model);
    },
    templateHelpers: function() {
      return {
        show_alphabet: function() {
          var index;
          index = LETTERS.indexOf(this.letter);
          return "" + (LETTERS.substring(0, index)) + "<span style=\"background:#000;color:#fff;\">" + this.letter + "</span>" + (LETTERS.substring(index + 1));
        },
        show_empty: function() {
          var i, out, rest, _i;
          rest = NAME_MAX_LENGTH - this.name.length;
          out = "";
          if (rest > 1) {
            for (i = _i = 1; 1 <= rest ? _i < rest : _i > rest; i = 1 <= rest ? ++_i : --_i) {
              out += "␣";
            }
          }
          return out;
        }
      };
    },
    initialize: function() {
      var that;
      that = this;
      this.model.on('change', function() {
        return that.render();
      });
      return window.channel.on('key', function(msg) {
        var index, letter, _name;
        clear_delay();
        letter = that.model.get('letter');
        index = LETTERS.indexOf(letter);
        _name = that.model.get('name');
        if (msg === 'up' && index > 0) {
          window.sfx.button.play();
          index -= 1;
          that.model.set('letter', LETTERS[index]);
        } else if (msg === 'down' && index < (LETTERS.length - 1)) {
          window.sfx.button.play();
          index += 1;
          that.model.set('letter', LETTERS[index]);
        } else if (msg === 'fire') {
          window.sfx.button2.play();
          if (letter === LETTER_BACKSPACE) {
            if (_name.length > 0) {
              that.model.set('name', _name.substring(0, _name.length - 1));
            }
          } else if (letter === LETTER_ENTER) {
            if (_name.length > 0) {
              window.channel.command('result:save', _name);
            }
          } else if (_name.length < NAME_MAX_LENGTH) {
            that.model.set('name', "" + _name + letter);
            _name = that.model.get('name');
            if (_name.length === NAME_MAX_LENGTH) {
              window.channel.command('result:save', _name);
            }
          }
        }
        return set_delay(handler, IDLE_DELAY);
      });
    },
    onDestroy: function() {
      window.channel.off('key');
      return this.model.off('change');
    }
  });
  ResultLayout = Marionette.LayoutView.extend({
    template: _.template("<div class=\"row\">\n    <div class=\"col-md-12\" id=\"time\">\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-md-12\" id=\"typewriter\">\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-md-12\" id=\"score\">\n    </div>\n</div>"),
    regions: {
      time: '#time',
      typewriter: '#typewriter',
      score: '#score'
    }
  });
  handler = function() {
    var _name;
    _name = name.get('name');
    if (_name.length < 1) {
      _name = null;
    }
    return window.channel.command('result:save', _name);
  };
  Mod.onStart = function(options) {
    _options = options;
    window.sfx.surprise.play();
    time = new Time({
      time: options.time
    });
    rank = new Rank(options.category.id, options.time);
    name = new Name();
    layout = new ResultLayout({
      el: make_content_wrapper()
    });
    layout.render();
    rank.on('sync', function() {
      if (1) {
        layout.getRegion('time').show(new GreatTimeView({
          model: time
        }));
        return layout.getRegion('typewriter').show(new TypewriterView({
          model: name
        }));
      } else {
        return layout.getRegion('time').show(new BadTimeView({
          model: time
        }));
      }
    });
    window.channel.comply('result:save', function(_name) {
      clear_delay();
      console.log('ulozeni dat');
      console.log(_options);
      console.log(_name);
      return window.channel.command('result:close');
    });
    set_delay(handler, IDLE_DELAY);
    return rank.fetch();
  };
  return Mod.onStop = function() {
    clear_delay();
    time = void 0;
    rank = void 0;
    return layout.destroy();
  };
});
