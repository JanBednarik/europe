// Generated by CoffeeScript 1.10.0
App.module("Game", function(Mod, App, Backbone, Marionette, $, _) {
  var Info, InfoItemView, PENALTY_TIME, Progress, ProgressItemView, Question, QuestionItemView, QuestionLayout, Questions, TIMER_DELAY, _options, handler, info, local_channel, progress, q_layout, questions;
  Mod.startWithParent = false;
  TIMER_DELAY = 100;
  PENALTY_TIME = void 0;
  local_channel = void 0;
  _options = void 0;
  info = void 0;
  progress = void 0;
  questions = void 0;
  q_layout = void 0;
  Progress = Backbone.Model.extend({
    defaults: {
      total: 0,
      current: 0
    },
    initialize: function() {
      var that;
      that = this;
      return local_channel.on('penalty', function(count) {
        var current, total;
        current = that.get('current');
        total = that.get('total');
        current += count;
        if (current > total) {
          current = total;
        }
        return that.set('current', current);
      });
    }
  });
  Info = Backbone.Model.extend({
    defaults: {
      question: 1,
      total_questions: null,
      category: null,
      time: 0
    },
    initialize: function() {
      var that;
      that = this;
      return local_channel.on('penalty', function(count) {
        var time;
        time = that.get('time');
        return that.set('time', time + count * 10);
      });
    }
  });
  Question = Backbone.Model.extend({
    idAttribute: 'id',
    defaults: {
      id: null,
      question: null,
      image: null,
      country: null,
      category: null,
      answer: null
    }
  });
  Questions = Backbone.Collection.extend({
    model: Question,
    parse: function(response, options) {
      return response.results;
    },
    initialize: function(models, options) {
      return this.url = "/api/questions/" + options.difficulty + "-" + options.category;
    }
  });
  InfoItemView = Marionette.ItemView.extend({
    template: function(serialized_model) {
      return _.template("<div class=\"col-md-4 text-left\">\n    <p>Otázka č.<%= question %>/<%= total_questions %></p>\n</div>\n<div class=\"col-md-4 text-center\">\n    <p><%= category %></p>\n</div>\n<div class=\"col-md-4 text-right\">\n    <p><%= show_time() %></p>\n</div>")(serialized_model);
    },
    templateHelpers: function() {
      return {
        show_time: function() {
          return display_elapsed(this.time);
        }
      };
    },
    initialize: function(options) {
      return this.model.on('change', (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
    },
    onDestroy: function() {
      return this.model.off('change');
    }
  });
  ProgressItemView = Marionette.ItemView.extend({
    className: 'progress',
    template: function(serialized_model) {
      return _.template("<div class=\"progress-bar\"\n     role=\"progressbar\"\n     aria-valuenow=\"<%= get_percent() %>\"\n     aria-valuemin=\"0\"\n     aria-valuemax=\"100\"\n     style=\"width: <%= get_percent() %>%;\"></div>")(serialized_model);
    },
    templateHelpers: function() {
      return {
        get_percent: function() {
          if (this.current <= this.total) {
            return (this.current / this.total) * 100;
          } else {
            return 100;
          }
        }
      };
    },
    initialize: function(options) {
      return this.model.on('change', (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
    },
    onDestroy: function() {
      return this.model.off('change');
    }
  });
  QuestionItemView = Marionette.ItemView.extend({
    tagName: 'div',
    template: function(serialized_model) {
      return _.template("<% if (image) {%><img height=\"150\" src=\"<%= image %>\" /><% } %><h1><%= question %></h1>")(serialized_model);
    },
    initialize: function(options) {
      var that;
      this.model.on('change', (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
      that = this;
      window.channel.on('tunnel', function(number) {
        var country;
        country = that.model.get('country');
        if (("" + number) === ("" + country.sensor)) {
          return local_channel.trigger('next', true);
        } else {
          return local_channel.trigger('penalty', PENALTY_TIME);
        }
      });
      window.channel.on('debug:good', function() {
        return local_channel.trigger('next', true);
      });
      return window.channel.on('debug:bad', function() {
        return local_channel.trigger('penalty', PENALTY_TIME);
      });
    },
    onDestroy: function() {
      window.channel.off('debug:bad');
      window.channel.off('debug:good');
      window.channel.off('tunnel');
      return this.model.off('change');
    }
  });
  QuestionLayout = Marionette.LayoutView.extend({
    template: _.template("<div class=\"row\">\n    <div class=\"col-md-12\" id=\"info\"></div>\n</div>\n<div class=\"row\" style=\"height:200px\">\n    <div class=\"col-md-12 text-center\" id=\"question\"></div>\n</div>\n<br/>\n<div class=\"row\">\n    <div class=\"col-md-12\" id=\"progress\"></div>\n</div>"),
    regions: {
      info: '#info',
      question: '#question',
      progress: '#progress'
    }
  });
  handler = function() {
    var current, time, total;
    time = info.get('time') + 1;
    info.set('time', time);
    current = progress.get('current');
    total = progress.get('total');
    if (current >= total) {
      return local_channel.trigger('next', false);
    } else {
      return progress.set('current', current + .1);
    }
  };
  Mod.onStart = function(options) {
    console.log('Game module');
    console.log(options);
    _options = options;
    PENALTY_TIME = options.gamemode.penalty;
    local_channel = Backbone.Radio.channel('game');
    info = new Info({
      total_questions: options.total_questions,
      category: options.gamemode.title
    });
    progress = new Progress({
      total: options.gamemode.time,
      current: 0
    });
    questions = new Questions(null, {
      difficulty: options.gamemode.difficulty,
      category: options.gamemode.category
    });
    questions.on('sync', function() {
      var question_view;
      q_layout = new QuestionLayout({
        el: make_content_wrapper()
      });
      q_layout.render();
      q_layout.getRegion('info').show(new InfoItemView({
        model: info
      }));
      question_view = new QuestionItemView({
        model: questions.at(info.get('question') - 1)
      });
      q_layout.getRegion('question').show(question_view);
      q_layout.getRegion('progress').show(new ProgressItemView({
        model: progress
      }));
      local_channel.on('next', function(user_answer) {
        var old_q, output, question;
        if (user_answer) {
          window.sfx.yes.play();
        } else {
          window.sfx.no.play();
        }
        question = info.get('question');
        old_q = questions.at(question - 1);
        old_q.set('answer', user_answer);
        question += 1;
        if (question > options.total_questions) {
          clear_timer();
          output = _.extend(_options, {
            questions: questions.toJSON(),
            answers: questions.map(function(i) {
              return {
                id: i.get('id'),
                answer: i.get('answer')
              };
            }),
            time: info.get('time')
          });
          return window.channel.command('game:close', output);
        } else {
          info.set('question', question);
          progress.set('current', 0);
          question_view.destroy();
          question_view = new QuestionItemView({
            model: questions.at(question - 1)
          });
          return q_layout.getRegion('question').show(question_view);
        }
      });
      return set_timer(handler, TIMER_DELAY);
    });
    return questions.fetch();
  };
  return Mod.onStop = function(options) {
    clear_timer();
    info = void 0;
    progress = void 0;
    questions = void 0;
    q_layout.destroy();
    return local_channel.reset();
  };
});
